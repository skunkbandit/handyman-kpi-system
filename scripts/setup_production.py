#!/usr/bin/env python
"""
Production Environment Setup Script

This script prepares the system for production deployment by:
1. Creating necessary directories
2. Setting up the database
3. Creating configuration files
4. Setting up systemd service (if requested)
5. Configuring permissions

Usage:
    python -m scripts.setup_production [--install-dir DIR] [--systemd] [--user USER]
    
Options:
    --install-dir DIR   : Installation directory (default: /opt/kpi-system)
    --systemd           : Set up systemd service
    --user USER         : User to run the service as (default: kpi-user)
    --admin-password PW : Set initial admin password
    --verbose           : Show detailed output
"""

import os
import sys
import argparse
import logging
import subprocess
import shutil
import getpass
import random
import string
from pathlib import Path

# Add the parent directory to the path so we can import modules
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Production Environment Setup')
    parser.add_argument('--install-dir', help='Installation directory')
    parser.add_argument('--systemd', action='store_true', help='Set up systemd service')
    parser.add_argument('--user', help='User to run the service as')
    parser.add_argument('--admin-password', help='Initial admin password')
    parser.add_argument('--verbose', action='store_true', help='Show detailed output')
    return parser.parse_args()


def setup_logging(verbose=False):
    """Configure logging"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    return logging.getLogger('production_setup')


def generate_secret_key(length=32):
    """Generate a random secret key"""
    chars = string.ascii_letters + string.digits + '!@#$%^&*()_-+=<>?'
    return ''.join(random.choice(chars) for _ in range(length))


def create_directories(install_dir, logger):
    """Create necessary directories"""
    dirs = [
        '',  # Root directory
        'instance',
        'instance/database',
        'instance/backups',
        'instance/logs',
        'instance/temp',
        'logs',
    ]
    
    for directory in dirs:
        path = os.path.join(install_dir, directory)
        try:
            os.makedirs(path, exist_ok=True)
            logger.info(f"Created directory: {path}")
        except Exception as e:
            logger.error(f"Failed to create directory {path}: {str(e)}")
            return False
    
    return True


def create_env_file(install_dir, admin_password, logger):
    """Create .env file with production settings"""
    env_file = os.path.join(install_dir, '.env')
    
    # Generate a secret key
    secret_key = generate_secret_key()
    
    # Get or generate admin password
    if not admin_password:
        admin_password = generate_secret_key(16)
        logger.info(f"Generated admin password: {admin_password}")
        logger.info("IMPORTANT: Save this password securely!")
    
    env_content = f"""# KPI System Production Environment Configuration
# Generated by setup_production.py

# Security Settings
SECRET_KEY="{secret_key}"
ADMIN_PASSWORD="{admin_password}"

# Database Configuration
DATABASE_URI=sqlite:///instance/database/kpi.db
BACKUP_RETENTION_DAYS=14

# Application Settings
FLASK_ENV=production
LOG_LEVEL=INFO
MAX_CONTENT_LENGTH=16777216  # 16MB max upload size
TIMEZONE=UTC

# Redis Cache Settings
REDIS_URL=redis://localhost:6379/0

# System Customization
COMPANY_NAME=Your Handyman Business
SYSTEM_TITLE=Craftsman KPI System
"""
    
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        # Set restricted permissions on .env file
        os.chmod(env_file, 0o600)
        logger.info(f"Created .env file: {env_file}")
        return True
    except Exception as e:
        logger.error(f"Failed to create .env file: {str(e)}")
        return False


def setup_database(install_dir, logger):
    """Set up the database with schema and initial data"""
    try:
        # Ensure we're in the right directory
        os.chdir(install_dir)
        
        # Run database migration
        logger.info("Running database migrations...")
        result = subprocess.run(
            [sys.executable, "-m", "scripts.migrate_database", "--backup"],
            check=True,
            capture_output=True,
            text=True
        )
        logger.debug(result.stdout)
        
        # Seed the database
        logger.info("Seeding database with initial data...")
        result = subprocess.run(
            [sys.executable, "-m", "scripts.seed_database"],
            check=True,
            capture_output=True,
            text=True
        )
        logger.debug(result.stdout)
        
        logger.info("Database setup complete")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Database setup failed: {e.stderr}")
        return False
    except Exception as e:
        logger.error(f"Database setup failed: {str(e)}")
        return False


def setup_systemd_service(install_dir, user, logger):
    """Set up systemd service for the application"""
    if not user:
        user = 'kpi-user'
    
    service_file = os.path.join(install_dir, 'kpi-system.service')
    systemd_path = '/etc/systemd/system/kpi-system.service'
    
    # Read the template service file
    try:
        with open(service_file, 'r') as f:
            service_content = f.read()
        
        # Replace placeholders
        service_content = service_content.replace('/opt/kpi-system', install_dir)
        service_content = service_content.replace('kpi-user', user)
        
        # Write to systemd directory
        with open(systemd_path, 'w') as f:
            f.write(service_content)
        
        # Reload systemd
        subprocess.run(['systemctl', 'daemon-reload'], check=True)
        
        logger.info(f"Created systemd service: {systemd_path}")
        logger.info("To start the service: sudo systemctl start kpi-system")
        logger.info("To enable at boot: sudo systemctl enable kpi-system")
        
        return True
    except Exception as e:
        logger.error(f"Failed to set up systemd service: {str(e)}")
        return False


def set_permissions(install_dir, user, logger):
    """Set correct permissions for the installation"""
    try:
        # Set ownership for critical directories
        for directory in ['instance', 'logs']:
            path = os.path.join(install_dir, directory)
            subprocess.run(['chown', '-R', f"{user}:{user}", path], check=True)
            logger.info(f"Set ownership of {path} to {user}")
        
        # Set permissions
        os.chmod(os.path.join(install_dir, 'instance'), 0o750)
        os.chmod(os.path.join(install_dir, 'logs'), 0o750)
        
        return True
    except Exception as e:
        logger.error(f"Failed to set permissions: {str(e)}")
        return False


def main():
    """Main function"""
    args = parse_args()
    logger = setup_logging(args.verbose)
    
    # Get installation directory
    install_dir = args.install_dir or '/opt/kpi-system'
    install_dir = os.path.abspath(install_dir)
    
    # Get user
    user = args.user or 'kpi-user'
    
    logger.info(f"Setting up production environment in {install_dir}")
    
    # Check if running as root for system-wide installation
    if os.geteuid() != 0 and args.systemd:
        logger.error("This script must be run as root to set up systemd service")
        sys.exit(1)
    
    # Create directories
    if not create_directories(install_dir, logger):
        logger.error("Failed to create required directories")
        sys.exit(1)
    
    # Create .env file
    if not create_env_file(install_dir, args.admin_password, logger):
        logger.error("Failed to create .env file")
        sys.exit(1)
    
    # Set up database
    if not setup_database(install_dir, logger):
        logger.error("Failed to set up database")
        sys.exit(1)
    
    # Set up systemd service if requested
    if args.systemd:
        if not setup_systemd_service(install_dir, user, logger):
            logger.error("Failed to set up systemd service")
            sys.exit(1)
        
        # Set permissions
        if not set_permissions(install_dir, user, logger):
            logger.error("Failed to set permissions")
            sys.exit(1)
    
    logger.info("Production environment setup complete")


if __name__ == '__main__':
    main()
