"""\nIntegration tests for database adapters and initializer.\n\nThis module tests the interaction between database adapters, initializer,\nand configuration manager to ensure they work correctly together with\ndifferent database types.\n"""\n\nimport os\nimport sys\nimport pytest\nimport tempfile\nimport unittest\nimport sqlite3\nfrom contextlib import closing\n\n# Add the project root to the path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))\n\n# Import installer modules\nfrom installer.core.config import ConfigManager\nfrom installer.core.database import DatabaseManager\nfrom installer.shared.database.adapters import get_adapter\nfrom installer.shared.database.initializer import DatabaseInitializer\n\n# Import test utils\nfrom utils import (\n    local_mysql_is_available,\n    local_postgresql_is_available,\n    TEST_ADMIN_USER,\n    TEST_EMPLOYEE_DATA,\n    validate_database_schema\n)\n\n\nclass TestDatabaseIntegration:\n    """Test database integration across different database types."""\n    \n    expected_tables = ['users', 'skill_tiers', 'employees', 'evaluations']\n    \n    def test_sqlite_integration(self, temp_directory, sample_schema_dir):\n        """Test integration with SQLite database."""\n        # Create database configuration\n        db_config = {\n            'type': 'sqlite',\n            'path': os.path.join(temp_directory, 'test.db')\n        }\n        \n        # Initialize database manager and initializer\n        initializer = DatabaseInitializer(schema_dir=sample_schema_dir)\n        \n        # Test connection\n        status, error = initializer.test_database_connection(db_config)\n        assert status, f"Connection test failed: {error}"\n        \n        # Initialize database\n        assert initializer.initialize_database(db_config), "Database initialization failed"\n        \n        # Verify schema was applied\n        with closing(sqlite3.connect(db_config['path'])) as conn:\n            valid, message = validate_database_schema(conn, self.expected_tables)\n            assert valid, message\n        \n        # Create admin user\n        assert initializer.create_admin_user(\n            TEST_ADMIN_USER['username'],\n            TEST_ADMIN_USER['password'],\n            TEST_ADMIN_USER['email'],\n            db_config\n        ), "Admin user creation failed"\n        \n        # Get database info\n        info = initializer.get_database_info(db_config)\n        assert info['type'] == 'sqlite'\n        assert info['tables']['users']['row_count'] == 1\n    \n    @pytest.mark.skipif(not local_mysql_is_available(), reason="MySQL not available")\n    def test_mysql_integration(self, temp_directory, sample_schema_dir):\n        """Test integration with MySQL database."""\n        # Create database configuration\n        db_config = {\n            'type': 'mysql',\n            'host': 'localhost',\n            'port': 3306,\n            'user': 'root',\n            'password': '',\n            'database': 'test_handyman'\n        }\n        \n        # Initialize database manager and initializer\n        initializer = DatabaseInitializer(schema_dir=sample_schema_dir)\n        \n        # Test connection\n        status, error = initializer.test_database_connection(db_config)\n        # Skip test if MySQL is not actually available or credentials are wrong\n        if not status and "Access denied" in error:\n            pytest.skip(f"MySQL credentials invalid: {error}")\n        assert status, f"Connection test failed: {error}"\n        \n        # Initialize database\n        assert initializer.initialize_database(db_config), "Database initialization failed"\n        \n        # Create admin user\n        assert initializer.create_admin_user(\n            TEST_ADMIN_USER['username'],\n            TEST_ADMIN_USER['password'],\n            TEST_ADMIN_USER['email'],\n            db_config\n        ), "Admin user creation failed"\n        \n        # Get database info\n        info = initializer.get_database_info(db_config)\n        assert info['type'] == 'mysql'\n        assert info['tables']['users']['row_count'] == 1