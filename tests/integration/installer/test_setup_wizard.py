"""\nIntegration tests for setup wizard components.\n\nThis module tests the setup wizard GUI components and their interaction\nwith the configuration manager and database components.\n"""\n\nimport os\nimport sys\nimport json\nimport pytest\nimport tempfile\nimport tkinter as tk\nfrom unittest.mock import MagicMock, patch\n\n# Add the project root to the path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))\n\n# Import test utilities\nfrom utils import create_test_configuration\n\n# Test class for the setup wizard integration tests\nclass TestSetupWizardIntegration:\n    """Test setup wizard integration with other components."""\n    \n    @pytest.fixture\n    def mock_wizard(self):\n        """Create a mock setup wizard for testing."""\n        # In a real test, we would import the actual wizard module\n        # For now, create a mock that simulates the wizard's behavior\n        wizard = MagicMock()\n        wizard.config = {}\n        wizard.current_page = 0\n        wizard.pages = ['welcome', 'database', 'admin', 'installation', 'confirm', 'install', 'finish']\n        \n        def navigate_to_page(page_index):\n            if 0 <= page_index < len(wizard.pages):\n                wizard.current_page = page_index\n                return True\n            return False\n        \n        def update_config(key, value):\n            wizard.config[key] = value\n            return True\n        \n        def get_config():\n            return wizard.config.copy()\n        \n        def save_config(path):\n            with open(path, 'w') as f:\n                json.dump(wizard.config, f, indent=4)\n            return True\n        \n        def load_config(path):\n            try:\n                with open(path, 'r') as f:\n                    wizard.config = json.load(f)\n                return True\n            except (IOError, json.JSONDecodeError):\n                return False\n        \n        wizard.navigate_to_page = navigate_to_page\n        wizard.update_config = update_config\n        wizard.get_config = get_config\n        wizard.save_config = save_config\n        wizard.load_config = load_config\n        \n        return wizard\n    \n    def test_wizard_navigation(self, mock_wizard):\n        """Test navigation between wizard pages."""\n        # Test forward navigation\n        assert mock_wizard.navigate_to_page(1)\n        assert mock_wizard.current_page == 1\n        \n        # Test navigation to last page\n        assert mock_wizard.navigate_to_page(6)\n        assert mock_wizard.current_page == 6\n        \n        # Test navigation to invalid page\n        assert not mock_wizard.navigate_to_page(7)\n        assert mock_wizard.current_page == 6\n        \n        # Test navigation to first page\n        assert mock_wizard.navigate_to_page(0)\n        assert mock_wizard.current_page == 0\n    \n    def test_wizard_config_management(self, mock_wizard, temp_directory):\n        """Test configuration management in the wizard."""\n        # Set configuration values\n        assert mock_wizard.update_config('app_name', 'Handyman KPI System')\n        assert mock_wizard.update_config('installation_path', os.path.join(temp_directory, 'kpi_system'))\n        assert mock_wizard.update_config('database', {\n            'type': 'sqlite',\n            'path': os.path.join(temp_directory, 'kpi.db')\n        })\n        \n        # Get and verify config\n        config = mock_wizard.get_config()\n        assert config['app_name'] == 'Handyman KPI System'\n        assert config['database']['type'] == 'sqlite'\n        \n        # Save configuration\n        config_path = os.path.join(temp_directory, 'config.json')\n        assert mock_wizard.save_config(config_path)\n        \n        # Clear config and load from file\n        mock_wizard.config = {}\n        assert mock_wizard.load_config(config_path)\n        assert mock_wizard.config['app_name'] == 'Handyman KPI System'\n    \n    @patch('tkinter.Tk')\n    @patch('tkinter.StringVar')\n    @patch('tkinter.BooleanVar')\n    def test_form_validation(self, mock_bool_var, mock_string_var, mock_tk, mock_wizard, temp_directory):\n        """Test form validation in the wizard."""\n        # Create test configuration\n        config_path = os.path.join(temp_directory, 'config.json')\n        create_test_configuration(config_path, database_type='sqlite', temp_dir=temp_directory)\n        \n        # Load configuration into wizard\n        mock_wizard.load_config(config_path)\n        \n        # Create mock form validators\n        def validate_required(value, field_name):\n            if not value:\n                return False, f"{field_name} is required"\n            return True, ""\n        \n        def validate_email(value):\n            if not value:\n                return False, "Email is required"\n            if '@' not in value:\n                return False, "Invalid email format"\n            return True, ""\n        \n        def validate_password(value):\n            if not value:\n                return False, "Password is required"\n            if len(value) < 8:\n                return False, "Password must be at least 8 characters"\n            if not any(c.isdigit() for c in value):\n                return False, "Password must contain at least one number"\n            if not any(c.isupper() for c in value):\n                return False, "Password must contain at least one uppercase letter"\n            return True, ""\n        \n        def validate_directory(value):\n            if not value:\n                return False, "Directory is required"\n            # In a real test, we would check if the directory exists or can be created\n            return True, ""\n        \n        # Test form validation\n        # Admin username\n        valid, _ = validate_required(mock_wizard.config['admin_user']['username'], 'Username')\n        assert valid\n        \n        # Admin email\n        valid, _ = validate_email(mock_wizard.config['admin_user']['email'])\n        assert valid\n        \n        # Admin password (not in config yet)\n        mock_wizard.update_config('admin_user', {\n            **mock_wizard.config['admin_user'],\n            'password': 'Password123'\n        })\n        valid, _ = validate_password(mock_wizard.config['admin_user']['password'])\n        assert valid\n        \n        # Installation path\n        valid, _ = validate_directory(mock_wizard.config['installation_path'])\n        assert valid\n        \n        # Test invalid inputs\n        invalid_email = 'admin-at-example.com'\n        valid, error = validate_email(invalid_email)\n        assert not valid\n        assert "Invalid email format" in error\n        \n        invalid_password = 'password'\n        valid, error = validate_password(invalid_password)\n        assert not valid\n        assert "must be at least 8 characters" in error or "must contain at least one uppercase letter" in error\n    \n    def test_wizard_database_integration(self, mock_wizard, temp_directory, sample_schema_dir):\n        """Test integration between wizard and database components."""\n        # Set up configuration\n        config_path = os.path.join(temp_directory, 'config.json')\n        db_path = os.path.join(temp_directory, 'kpi.db')\n        \n        # Create test configuration\n        create_test_configuration(config_path, database_type='sqlite', temp_dir=temp_directory)\n        \n        # Load configuration into wizard\n        mock_wizard.load_config(config_path)\n        \n        # Update database configuration\n        mock_wizard.update_config('database', {\n            'type': 'sqlite',\n            'path': db_path\n        })\n        \n        # Create a mock database initializer\n        class MockDatabaseInitializer:\n            def __init__(self, schema_dir):\n                self.schema_dir = schema_dir\n            \n            def test_database_connection(self, db_config):\n                if db_config['type'] == 'sqlite':\n                    return True, ""\n                return False, "Unsupported database type"\n            \n            def initialize_database(self, db_config):\n                if db_config['type'] == 'sqlite':\n                    # Create empty database file\n                    with open(db_config['path'], 'w') as f:\n                        f.write('')\n                    return True\n                return False\n            \n            def create_admin_user(self, username, password, email, db_config):\n                if db_config['type'] == 'sqlite' and os.path.exists(db_config['path']):\n                    return True\n                return False\n        \n        # Test database connection\n        db_initializer = MockDatabaseInitializer(sample_schema_dir)\n        db_config = mock_wizard.config['database']\n        \n        status, _ = db_initializer.test_database_connection(db_config)\n        assert status, "Database connection test failed"\n        \n        # Test database initialization\n        assert db_initializer.initialize_database(db_config)\n        assert os.path.exists(db_path)\n        \n        # Test admin user creation\n        admin_config = mock_wizard.config['admin_user']\n        assert db_initializer.create_admin_user(\n            admin_config['username'],\n            'Password123',  # This would come from the wizard form\n            admin_config['email'],\n            db_config\n        )\n    \n    def test_wizard_workflow(self, mock_wizard, temp_directory):\n        """Test the complete wizard workflow."""\n        # Set up test configuration\n        config_path = os.path.join(temp_directory, 'config.json')\n        create_test_configuration(config_path, database_type='sqlite', temp_dir=temp_directory)\n        \n        # Load configuration into wizard\n        mock_wizard.load_config(config_path)\n        \n        # Simulate user going through the wizard\n        \n        # 1. Welcome page\n        assert mock_wizard.navigate_to_page(0)\n        assert mock_wizard.current_page == 0\n        \n        # 2. Database configuration page\n        assert mock_wizard.navigate_to_page(1)\n        assert mock_wizard.current_page == 1\n        \n        # Update database configuration\n        mock_wizard.update_config('database', {\n            'type': 'sqlite',\n            'path': os.path.join(temp_directory, 'kpi.db')\n        })\n        \n        # 3. Admin user configuration page\n        assert mock_wizard.navigate_to_page(2)\n        assert mock_wizard.current_page == 2\n        \n        # Update admin configuration\n        mock_wizard.update_config('admin_user', {\n            'username': 'admin',\n            'email': 'admin@example.com',\n            'password': 'Password123'\n        })\n        \n        # 4. Installation path page\n        assert mock_wizard.navigate_to_page(3)\n        assert mock_wizard.current_page == 3\n        \n        # Update installation path\n        mock_wizard.update_config('installation_path', os.path.join(temp_directory, 'kpi_system'))\n        \n        # 5. Confirmation page\n        assert mock_wizard.navigate_to_page(4)\n        assert mock_wizard.current_page == 4\n        \n        # 6. Installation page\n        assert mock_wizard.navigate_to_page(5)\n        assert mock_wizard.current_page == 5\n        \n        # 7. Finish page\n        assert mock_wizard.navigate_to_page(6)\n        assert mock_wizard.current_page == 6\n        \n        # Save final configuration\n        assert mock_wizard.save_config(config_path)\n        \n        # Verify the complete configuration\n        with open(config_path, 'r') as f:\n            config = json.load(f)\n        \n        assert config['database']['type'] == 'sqlite'\n        assert config['admin_user']['username'] == 'admin'\n        assert config['installation_path'] == os.path.join(temp_directory, 'kpi_system')