"""\nTest fixtures for installer integration tests.\n\nThis module provides fixtures for testing the installer components\nin an integrated manner.\n"""\n\nimport os\nimport sys\nimport pytest\nimport tempfile\nimport shutil\nimport sqlite3\nfrom contextlib import closing\n\n# Add the project root to the path to ensure imports work correctly\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))\n\n# Import installer modules\nfrom installer.core.config import ConfigManager\nfrom installer.core.database import DatabaseManager\nfrom installer.shared.database.adapters import SQLiteAdapter, MySQLAdapter, PostgreSQLAdapter\n\n\n@pytest.fixture\ndef temp_directory():\n    """Create a temporary directory for testing and clean it up after."""\n    temp_dir = tempfile.mkdtemp()\n    yield temp_dir\n    shutil.rmtree(temp_dir)\n\n\n@pytest.fixture\ndef config_file(temp_directory):\n    """Create a temporary configuration file."""\n    config_path = os.path.join(temp_directory, 'installer_config.json')\n    \n    # Create a basic configuration\n    config = {\n        'version': '1.0.0',\n        'app_name': 'Handyman KPI System',\n        'database': {\n            'type': 'sqlite',\n            'path': os.path.join(temp_directory, 'test_db.sqlite')\n        },\n        'installation_path': os.path.join(temp_directory, 'kpi_system'),\n        'admin_user': {\n            'username': 'admin',\n            'email': 'admin@example.com'\n        }\n    }\n    \n    # Create config manager and save config\n    config_manager = ConfigManager(config_path)\n    config_manager.save_config(config)\n    \n    yield config_path\n\n\n@pytest.fixture\ndef sqlite_database(temp_directory):\n    """Create a temporary SQLite database for testing."""\n    db_path = os.path.join(temp_directory, 'test_db.sqlite')\n    \n    # Create a test database with schema\n    with closing(sqlite3.connect(db_path)) as conn:\n        with closing(conn.cursor()) as cursor:\n            cursor.execute('''\n                CREATE TABLE users (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    username TEXT UNIQUE NOT NULL,\n                    password_hash TEXT NOT NULL,\n                    salt TEXT NOT NULL,\n                    email TEXT,\n                    is_admin INTEGER DEFAULT 0\n                )\n            ''')\n            cursor.execute('''\n                CREATE TABLE skill_tiers (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    name TEXT UNIQUE NOT NULL,\n                    description TEXT\n                )\n            ''')\n            cursor.execute('''\n                CREATE TABLE employees (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    name TEXT NOT NULL,\n                    email TEXT UNIQUE,\n                    phone TEXT,\n                    skill_tier_id INTEGER,\n                    FOREIGN KEY (skill_tier_id) REFERENCES skill_tiers(id)\n                )\n            ''')\n            cursor.execute('''\n                CREATE TABLE evaluations (\n                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    employee_id INTEGER NOT NULL,\n                    date TEXT NOT NULL,\n                    score REAL NOT NULL,\n                    FOREIGN KEY (employee_id) REFERENCES employees(id)\n                )\n            ''')\n            \n            # Insert sample data\n            cursor.execute('''\n                INSERT INTO skill_tiers (name, description) VALUES\n                ('Apprentice', 'Entry level worker, requires supervision'),\n                ('Handyman', 'Basic skills, works independently on simple tasks'),\n                ('Craftsman', 'Experienced technician with broad skills'),\n                ('Master Craftsman', 'Expert with specialized knowledge'),\n                ('Lead Craftsman', 'Team leader with project management skills')\n            ''')\n            conn.commit()\n    \n    yield db_path\n\n\n@pytest.fixture\ndef database_config(sqlite_database):\n    """Create a database configuration for testing."""\n    return {\n        'type': 'sqlite',\n        'path': sqlite_database\n    }\n\n\n@pytest.fixture\ndef database_manager(database_config):\n    """Create a database manager for testing."""\n    manager = DatabaseManager(database_config)\n    yield manager\n\n\n@pytest.fixture\ndef mock_mysql_config():\n    """Create a mock MySQL configuration for testing."""\n    return {\n        'type': 'mysql',\n        'host': 'localhost',\n        'port': 3306,\n        'database': 'test_handyman',\n        'user': 'test_user',\n        'password': 'test_password'\n    }\n\n\n@pytest.fixture\ndef mock_postgresql_config():\n    """Create a mock PostgreSQL configuration for testing."""\n    return {\n        'type': 'postgresql',\n        'host': 'localhost',\n        'port': 5432,\n        'database': 'test_handyman',\n        'user': 'test_user',\n        'password': 'test_password'\n    }\n\n\n@pytest.fixture\ndef sample_schema_dir(temp_directory):\n    """Create a directory with sample schema files for different database types."""\n    schema_dir = os.path.join(temp_directory, 'schema')\n    os.makedirs(schema_dir, exist_ok=True)\n    \n    # SQLite schema\n    with open(os.path.join(schema_dir, 'schema_sqlite.sql'), 'w') as f:\n        f.write('''\n            CREATE TABLE users (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                username TEXT UNIQUE NOT NULL,\n                password_hash TEXT NOT NULL,\n                salt TEXT NOT NULL,\n                email TEXT,\n                is_admin INTEGER DEFAULT 0\n            );\n            \n            CREATE TABLE skill_tiers (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT UNIQUE NOT NULL,\n                description TEXT\n            );\n            \n            CREATE TABLE employees (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                name TEXT NOT NULL,\n                email TEXT UNIQUE,\n                phone TEXT,\n                skill_tier_id INTEGER,\n                FOREIGN KEY (skill_tier_id) REFERENCES skill_tiers(id)\n            );\n            \n            CREATE TABLE evaluations (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                employee_id INTEGER NOT NULL,\n                date TEXT NOT NULL,\n                score REAL NOT NULL,\n                FOREIGN KEY (employee_id) REFERENCES employees(id)\n            );\n        ''')\n    \n    # MySQL schema\n    with open(os.path.join(schema_dir, 'schema_mysql.sql'), 'w') as f:\n        f.write('''\n            CREATE TABLE users (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                username VARCHAR(255) UNIQUE NOT NULL,\n                password_hash VARCHAR(255) NOT NULL,\n                salt VARCHAR(255) NOT NULL,\n                email VARCHAR(255),\n                is_admin TINYINT DEFAULT 0\n            );\n            \n            CREATE TABLE skill_tiers (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                name VARCHAR(255) UNIQUE NOT NULL,\n                description TEXT\n            );\n            \n            CREATE TABLE employees (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                name VARCHAR(255) NOT NULL,\n                email VARCHAR(255) UNIQUE,\n                phone VARCHAR(50),\n                skill_tier_id INT,\n                FOREIGN KEY (skill_tier_id) REFERENCES skill_tiers(id)\n            );\n            \n            CREATE TABLE evaluations (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                employee_id INT NOT NULL,\n                date DATE NOT NULL,\n                score FLOAT NOT NULL,\n                FOREIGN KEY (employee_id) REFERENCES employees(id)\n            );\n        ''')\n    \n    # PostgreSQL schema\n    with open(os.path.join(schema_dir, 'schema_postgresql.sql'), 'w') as f:\n        f.write('''\n            CREATE TABLE users (\n                id SERIAL PRIMARY KEY,\n                username VARCHAR(255) UNIQUE NOT NULL,\n                password_hash VARCHAR(255) NOT NULL,\n                salt VARCHAR(255) NOT NULL,\n                email VARCHAR(255),\n                is_admin BOOLEAN DEFAULT FALSE\n            );\n            \n            CREATE TABLE skill_tiers (\n                id SERIAL PRIMARY KEY,\n                name VARCHAR(255) UNIQUE NOT NULL,\n                description TEXT\n            );\n            \n            CREATE TABLE employees (\n                id SERIAL PRIMARY KEY,\n                name VARCHAR(255) NOT NULL,\n                email VARCHAR(255) UNIQUE,\n                phone VARCHAR(50),\n                skill_tier_id INTEGER,\n                FOREIGN KEY (skill_tier_id) REFERENCES skill_tiers(id)\n            );\n            \n            CREATE TABLE evaluations (\n                id SERIAL PRIMARY KEY,\n                employee_id INTEGER NOT NULL,\n                date DATE NOT NULL,\n                score FLOAT NOT NULL,\n                FOREIGN KEY (employee_id) REFERENCES employees(id)\n            );\n        ''')\n    \n    yield schema_dir