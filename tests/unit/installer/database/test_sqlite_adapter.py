"""\nTest suite for SQLite database adapter.\n\nThis module contains comprehensive tests for the SQLite database adapter\nto ensure it functions correctly and handles edge cases appropriately.\n"""\n\nimport os\nimport sys\nimport unittest\nimport tempfile\nimport shutil\nimport sqlite3\nfrom unittest.mock import patch, MagicMock\n\n# Add the main project directory to the path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../')))\n\nfrom installer.shared.database.adapters import get_adapter\n\n\nclass TestSQLiteAdapter(unittest.TestCase):\n    """Test SQLite database adapter."""\n    \n    def setUp(self):\n        """Set up test environment."""\n        # Create temporary directory for test database\n        self.temp_dir = tempfile.mkdtemp()\n        self.db_path = os.path.join(self.temp_dir, 'test.db')\n        self.config = {\n            'path': self.db_path\n        }\n        \n        # Simple schema for testing\n        self.schema = """\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT UNIQUE NOT NULL,\n            password_hash TEXT NOT NULL,\n            salt TEXT NOT NULL,\n            email TEXT,\n            is_admin INTEGER DEFAULT 0\n        );\n        """\n        \n        # Create adapter\n        self.adapter = get_adapter('sqlite', self.config)\n    \n    def tearDown(self):\n        """Clean up test environment."""\n        if os.path.exists(self.temp_dir):\n            shutil.rmtree(self.temp_dir)\n    \n    def test_adapter_creation(self):\n        """Test adapter creation."""\n        # Test with valid configuration\n        adapter = get_adapter('sqlite', self.config)\n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.db_path, self.db_path)\n        \n        # Test with missing path (should use default)\n        adapter = get_adapter('sqlite', {})\n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.db_path, 'data/database.db')\n    \n    def test_connection(self):\n        """Test database connection."""\n        # Test connection to new database (should create file)\n        self.assertTrue(self.adapter.test_connection())\n        self.assertTrue(os.path.exists(self.db_path))\n        \n        # Test connection to existing database\n        self.assertTrue(self.adapter.test_connection())