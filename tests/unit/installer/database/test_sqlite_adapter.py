"""\nTest suite for SQLite database adapter.\n\nThis module contains comprehensive tests for the SQLite database adapter\nto ensure it functions correctly and handles edge cases appropriately.\n"""\n\nimport os\nimport sys\nimport unittest\nimport tempfile\nimport shutil\nimport sqlite3\nfrom unittest.mock import patch, MagicMock\n\n# Add the main project directory to the path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../')))\n\nfrom installer.shared.database.adapters import get_adapter\n\n\nclass TestSQLiteAdapter(unittest.TestCase):\n    """Test SQLite database adapter."""\n    \n    def setUp(self):\n        """Set up test environment."""\n        # Create temporary directory for test database\n        self.temp_dir = tempfile.mkdtemp()\n        self.db_path = os.path.join(self.temp_dir, 'test.db')\n        self.config = {\n            'path': self.db_path\n        }\n        \n        # Simple schema for testing\n        self.schema = """\n        CREATE TABLE users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT UNIQUE NOT NULL,\n            password_hash TEXT NOT NULL,\n            salt TEXT NOT NULL,\n            email TEXT,\n            is_admin INTEGER DEFAULT 0\n        );\n        """\n        \n        # Create adapter\n        self.adapter = get_adapter('sqlite', self.config)\n    \n    def tearDown(self):\n        """Clean up test environment."""\n        if os.path.exists(self.temp_dir):\n            shutil.rmtree(self.temp_dir)\n    \n    def test_adapter_creation(self):\n        """Test adapter creation."""\n        # Test with valid configuration\n        adapter = get_adapter('sqlite', self.config)\n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.db_path, self.db_path)\n        \n        # Test with missing path (should use default)\n        adapter = get_adapter('sqlite', {})\n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.db_path, 'data/database.db')\n    \n    def test_connection(self):\n        """Test database connection."""\n        # Test connection to new database (should create file)\n        self.assertTrue(self.adapter.test_connection())\n        self.assertTrue(os.path.exists(self.db_path))\n        \n        # Test connection to existing database\n        self.assertTrue(self.adapter.test_connection())\n    \n    def test_connection_failure(self):\n        """Test connection failure scenarios."""\n        # Test with invalid path (directory instead of file)\n        invalid_dir = os.path.join(self.temp_dir, 'invalid_dir')\n        os.makedirs(invalid_dir, exist_ok=True)\n        \n        adapter = get_adapter('sqlite', {'path': invalid_dir})\n        self.assertFalse(adapter.test_connection())\n    \n    def test_initialization(self):\n        """Test database initialization."""\n        # Initialize database\n        self.assertTrue(self.adapter.initialize(self.schema))\n        self.assertTrue(os.path.exists(self.db_path))\n        \n        # Verify table was created\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")\n        self.assertIsNotNone(cursor.fetchone())\n        conn.close()\n    \n    def test_initialization_with_invalid_schema(self):\n        """Test initialization with invalid schema."""\n        # Test with invalid SQL\n        invalid_schema = "CREATE TABLE invalid_syntax (id INTEGER PRIMARY"  # Missing closing parenthesis\n        self.assertFalse(self.adapter.initialize(invalid_schema))\n    \n    def test_admin_user_creation(self):\n        """Test admin user creation."""\n        # Initialize database\n        self.adapter.initialize(self.schema)\n        \n        # Create admin user\n        username = "admin"\n        password = "Password123"\n        email = "admin@example.com"\n        \n        self.assertTrue(self.adapter.create_admin_user(username, password, email))\n        \n        # Verify admin user was created\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        cursor.execute("SELECT id, username, email, is_admin FROM users WHERE username = ?", (username,))\n        user = cursor.fetchone()\n        conn.close()\n        \n        self.assertIsNotNone(user)\n        self.assertEqual(user[1], username)\n        self.assertEqual(user[2], email)\n        self.assertEqual(user[3], 1)  # is_admin = 1\n    \n    def test_admin_user_update(self):\n        """Test admin user update if already exists."""\n        # Initialize database and create initial admin user\n        self.adapter.initialize(self.schema)\n        \n        username = "admin"\n        password1 = "Password123"\n        email1 = "admin@example.com"\n        \n        self.adapter.create_admin_user(username, password1, email1)\n        \n        # Update admin user with new email and password\n        password2 = "NewPassword456"\n        email2 = "new_admin@example.com"\n        \n        self.assertTrue(self.adapter.create_admin_user(username, password2, email2))\n        \n        # Verify admin user was updated\n        conn = sqlite3.connect(self.db_path)\n        cursor = conn.cursor()\n        cursor.execute("SELECT id, username, email, is_admin FROM users WHERE username = ?", (username,))\n        user = cursor.fetchone()\n        conn.close()\n        \n        self.assertIsNotNone(user)\n        self.assertEqual(user[1], username)\n        self.assertEqual(user[2], email2)\n        self.assertEqual(user[3], 1)  # is_admin = 1\n    \n    def test_admin_user_with_missing_table(self):\n        """Test admin user creation with missing users table."""\n        # Initialize empty database\n        conn = sqlite3.connect(self.db_path)\n        conn.close()\n        \n        # Attempt to create admin user without users table\n        self.assertFalse(self.adapter.create_admin_user("admin", "password", "admin@example.com"))\n    \n    def test_password_hashing(self):\n        """Test password hashing."""\n        password = "TestPassword123"\n        salt = "0123456789abcdef"\n        \n        # Hash password\n        password_hash = self.adapter._hash_password(password, salt)\n        \n        # Verify hash is not empty and is a hex string\n        self.assertTrue(password_hash)\n        self.assertTrue(all(c in '0123456789abcdef' for c in password_hash))\n        \n        # Same password and salt should produce same hash\n        password_hash2 = self.adapter._hash_password(password, salt)\n        self.assertEqual(password_hash, password_hash2)\n        \n        # Different password should produce different hash\n        password_hash3 = self.adapter._hash_password("DifferentPassword", salt)\n        self.assertNotEqual(password_hash, password_hash3)\n        \n        # Different salt should produce different hash\n        password_hash4 = self.adapter._hash_password(password, "fedcba9876543210")\n        self.assertNotEqual(password_hash, password_hash4)\n    \n    def test_get_database_info(self):\n        """Test getting database information."""\n        # Initialize database with schema and create admin user\n        self.adapter.initialize(self.schema)\n        self.adapter.create_admin_user("admin", "password", "admin@example.com")\n        \n        # Get database info\n        info = self.adapter.get_database_info()\n        \n        # Verify information\n        self.assertEqual(info['type'], 'sqlite')\n        self.assertEqual(info['path'], self.db_path)\n        self.assertIn('version', info)\n        self.assertIn('size_bytes', info)\n        self.assertEqual(info['table_count'], 1)\n        self.assertIn('users', info['tables'])\n        self.assertEqual(info['tables']['users']['row_count'], 1)\n    \n    def test_get_database_info_with_error(self):\n        """Test getting database information with error."""\n        # Create adapter with non-existent database\n        adapter = get_adapter('sqlite', {'path': os.path.join(self.temp_dir, 'nonexistent.db')})\n        \n        # Get database info (should return error info)\n        info = adapter.get_database_info()\n        self.assertEqual(info['type'], 'sqlite')\n        self.assertIn('path', info)\n        self.assertIn('error', info)\n    \n    @patch('sqlite3.connect')\n    def test_connection_error(self, mock_connect):\n        """Test connection error handling."""\n        # Mock sqlite3.connect to raise exception\n        mock_connect.side_effect = sqlite3.Error("Test error")\n        \n        # Test connection (should fail)\n        self.assertFalse(self.adapter.test_connection())\n    \n    @patch('sqlite3.connect')\n    def test_initialization_error(self, mock_connect):\n        """Test initialization error handling."""\n        # Create mock connection and cursor\n        mock_cursor = MagicMock()\n        mock_connection = MagicMock()\n        mock_connection.cursor.return_value = mock_cursor\n        \n        # Make executescript raise exception\n        mock_connection.executescript.side_effect = sqlite3.Error("Test error")\n        \n        # Configure the mock to return our mock connection\n        mock_connect.return_value = mock_connection\n        \n        # Test initialization (should fail)\n        self.assertFalse(self.adapter.initialize(self.schema))\n    \n    @patch('sqlite3.connect')\n    def test_admin_user_creation_error(self, mock_connect):\n        """Test admin user creation error handling."""\n        # Create mock connection and cursor\n        mock_cursor = MagicMock()\n        mock_cursor.fetchone.return_value = True  # Pretend users table exists\n        \n        mock_connection = MagicMock()\n        mock_connection.cursor.return_value = mock_cursor\n        \n        # Make execute raise exception\n        mock_cursor.execute.side_effect = sqlite3.Error("Test error")\n        \n        # Configure the mock to return our mock connection\n        mock_connect.return_value = mock_connection\n        \n        # Test admin user creation (should fail)\n        self.assertFalse(self.adapter.create_admin_user("admin", "password", "admin@example.com"))\n\n\nif __name__ == '__main__':\n    unittest.main()