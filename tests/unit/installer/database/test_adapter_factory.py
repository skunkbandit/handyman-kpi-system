"""\nTest suite for database adapter factory function.\n\nThis module contains tests for the get_adapter factory function to ensure\nit correctly creates adapters for different database types and handles errors.\n"""\n\nimport os\nimport sys\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\n# Add the main project directory to the path\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../../../')))\n\n# Import the get_adapter function\nfrom installer.shared.database.adapters import get_adapter\n\n\nclass TestAdapterFactory(unittest.TestCase):\n    """Test database adapter factory function."""\n    \n    def test_get_sqlite_adapter(self):\n        """Test getting SQLite adapter."""\n        adapter = get_adapter('sqlite', {'path': 'test.db'})\n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.__class__.__name__, 'DatabaseAdapter')\n        self.assertEqual(adapter.__module__, 'installer.shared.database.adapters.sqlite')\n    \n    @patch('installer.shared.database.adapters.mysql.mysql')\n    def test_get_mysql_adapter(self, mock_mysql):\n        """Test getting MySQL adapter."""\n        # Set up mock\n        mock_connection = MagicMock()\n        mock_cursor = MagicMock()\n        mock_connection.cursor.return_value = mock_cursor\n        mock_mysql.connector.connect.return_value = mock_connection\n        \n        adapter = get_adapter('mysql', {\n            'host': 'localhost',\n            'port': '3306',\n            'user': 'root',\n            'password': 'password',\n            'name': 'test_db'\n        })\n        \n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.__class__.__name__, 'DatabaseAdapter')\n        self.assertEqual(adapter.__module__, 'installer.shared.database.adapters.mysql')\n    \n    @patch('installer.shared.database.adapters.postgresql.psycopg2')\n    def test_get_postgresql_adapter(self, mock_psycopg2):\n        """Test getting PostgreSQL adapter."""\n        # Set up mock\n        mock_connection = MagicMock()\n        mock_cursor = MagicMock()\n        mock_connection.cursor.return_value = mock_cursor\n        mock_psycopg2.connect.return_value = mock_connection\n        \n        adapter = get_adapter('postgresql', {\n            'host': 'localhost',\n            'port': '5432',\n            'user': 'postgres',\n            'password': 'password',\n            'name': 'test_db'\n        })\n        \n        self.assertIsNotNone(adapter)\n        self.assertEqual(adapter.__class__.__name__, 'DatabaseAdapter')\n        self.assertEqual(adapter.__module__, 'installer.shared.database.adapters.postgresql')\n    \n    def test_get_adapter_unsupported_type(self):\n        """Test getting adapter for unsupported database type."""\n        with self.assertRaises(ValueError) as context:\n            get_adapter('unsupported', {})\n        \n        self.assertIn('Unsupported database type', str(context.exception))\n    \n    @patch('installer.shared.database.adapters.__import__')\n    def test_get_adapter_import_error(self, mock_import):\n        """Test handling of import error when getting adapter."""\n        # Set up mock to raise ImportError\n        mock_import.side_effect = ImportError("Test import error")\n        \n        with self.assertRaises(ImportError) as context:\n            get_adapter('mysql', {})\n        \n        self.assertIn('Failed to load database adapter', str(context.exception))\n        self.assertIn('Test import error', str(context.exception))\n\n\nif __name__ == '__main__':\n    unittest.main()