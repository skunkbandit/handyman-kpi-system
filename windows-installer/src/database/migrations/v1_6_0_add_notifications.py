"""\nMigration script v1.6.0 - Add notification system\n"""\n\ndef upgrade(connection):\n    """\n    Create tables for notification system\n    """\n    cursor = connection.cursor()\n    \n    # Create notification_types table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS notification_types (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL UNIQUE,\n            description TEXT,\n            template TEXT NOT NULL,\n            icon TEXT,\n            color TEXT,\n            is_system BOOLEAN NOT NULL DEFAULT 1\n        );\n    ''')\n    \n    # Create notifications table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS notifications (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            type_id INTEGER NOT NULL,\n            title TEXT NOT NULL,\n            message TEXT NOT NULL,\n            data JSON,\n            is_read BOOLEAN NOT NULL DEFAULT 0,\n            created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            read_at DATETIME,\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n            FOREIGN KEY (type_id) REFERENCES notification_types (id) ON DELETE CASCADE\n        );\n    ''')\n    \n    # Create notification_settings table\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS notification_settings (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER NOT NULL,\n            type_id INTEGER NOT NULL,\n            email_enabled BOOLEAN NOT NULL DEFAULT 1,\n            app_enabled BOOLEAN NOT NULL DEFAULT 1,\n            UNIQUE(user_id, type_id),\n            FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,\n            FOREIGN KEY (type_id) REFERENCES notification_types (id) ON DELETE CASCADE\n        );\n    ''')\n    \n    # Create indexes\n    cursor.execute('''\n        CREATE INDEX IF NOT EXISTS idx_notifications_user_id \n        ON notifications(user_id);\n    ''')\n    \n    cursor.execute('''\n        CREATE INDEX IF NOT EXISTS idx_notifications_type_id \n        ON notifications(type_id);\n    ''')\n    \n    cursor.execute('''\n        CREATE INDEX IF NOT EXISTS idx_notifications_is_read \n        ON notifications(is_read);\n    ''')\n    \n    cursor.execute('''\n        CREATE INDEX IF NOT EXISTS idx_notifications_created_at \n        ON notifications(created_at);\n    ''')\n    \n    # Insert default notification types\n    cursor.execute('''\n        INSERT INTO notification_types (name, description, template, icon, color)\n        VALUES \n        ('evaluation_due', 'Evaluation Due Reminder', 'Evaluation for {{employee_name}} is due on {{due_date}}', 'calendar-check', 'blue'),\n        ('evaluation_completed', 'Evaluation Completed', 'Evaluation for {{employee_name}} has been completed', 'file-check', 'green'),\n        ('skill_improvement', 'Skill Improvement', '{{employee_name}} has improved in {{skill_name}}', 'trending-up', 'green'),\n        ('employee_tier_change', 'Employee Tier Change', '{{employee_name}} has been promoted to {{tier}}', 'award', 'purple'),\n        ('report_generated', 'Report Generated', 'Your report "{{report_name}}" has been generated', 'file-text', 'blue'),\n        ('account_action', 'Account Action', '{{action}} on your account', 'user', 'orange'),\n        ('system_backup', 'System Backup', 'System backup {{status}}', 'database', 'blue'),\n        ('system_update', 'System Update', 'System update available: {{version}}', 'refresh-cw', 'orange');\n    ''')\n    \n    # Update schema version\n    cursor.execute('''\n        INSERT OR REPLACE INTO schema_version (version, updated_at)\n        VALUES ('1.6.0', datetime('now'));\n    ''')\n    \n    connection.commit()\n    \n    return True\n\n\ndef downgrade(connection):\n    """\n    Remove notification system tables\n    """\n    cursor = connection.cursor()\n    \n    # Drop tables\n    cursor.execute('DROP TABLE IF EXISTS notification_settings;')\n    cursor.execute('DROP TABLE IF EXISTS notifications;')\n    cursor.execute('DROP TABLE IF EXISTS notification_types;')\n    \n    # Update schema version back to previous version\n    cursor.execute('''\n        INSERT OR REPLACE INTO schema_version (version, updated_at)\n        VALUES ('1.5.0', datetime('now'));\n    ''')\n    \n    connection.commit()\n    \n    return True